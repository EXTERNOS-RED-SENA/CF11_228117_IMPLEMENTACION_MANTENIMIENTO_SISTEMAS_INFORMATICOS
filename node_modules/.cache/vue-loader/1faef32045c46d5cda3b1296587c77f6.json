{"remainingRequest":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/src/views/Tema2.vue?vue&type=template&id=0961c82b&lang=pug","dependencies":[{"path":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/src/views/Tema2.vue","mtime":1732202733813},{"path":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/CF11_228117_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDIKICAgICAgaDEgUHJ1ZWJhcyBkZSByZW5kaW1pZW50bwoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgIC5jb2wtbGctNS5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yMi5wbmcnIGFsdD0nJykgICAgICAgCiAgICAgIC5jb2wtbGctNy5teS1sZy0wLm15LTMKICAgICAgICBwLm1iLTAgTGFzIHBydWViYXMgZGUgcmVuZGltaWVudG8gc2UgYXBsaWNhbiBwYXJhIHZlcmlmaWNhciBxdWUgZWwgY2FibGVhZG8gZXN0cnVjdHVyYWRvIGN1bXBsYSBjb24gbG9zIHJlcXVpc2l0b3MgZGUgY2FsaWRhZCB5IHB1ZWRhIHNvcG9ydGFyIGxhcyBkZW1hbmRhcyBkZSBsYXMgYXBsaWNhY2lvbmVzIG1vZGVybmFzLiBFc3RhcyBwcnVlYmFzIHBlcm1pdGVuIGlkZW50aWZpY2FyIHByb2JsZW1hcyByZWxhY2lvbmFkb3MgY29uIGxhIHDDqXJkaWRhIGRlIHNlw7FhbCwgaW50ZXJmZXJlbmNpYXMgeSBvdHJhcyBkZWZpY2llbmNpYXMgcXVlIHB1ZWRlbiBhZmVjdGFyIGxhIGVmaWNhY2lhIGRlIGxhIHJlZC4KCiAgICBTZXBhcmFkb3IgCiAgICAjdF8yXzEudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiAyLjEgQXRlbnVhY2nDs24geSBww6lyZGlkYQogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy05Lm15LWxnLTAubXktMwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubXktNAogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzIzLnBuZycgYWx0PScnKSAgCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgICAgICBwLm1iLTAgTGEgYXRlbnVhY2nDs24geSBsYSBww6lyZGlkYSBkZSBzZcOxYWwgc29uIGZhY3RvcmVzIGZ1bmRhbWVudGFsZXMgcXVlIGFmZWN0YW4gbGEgY2FsaWRhZCB5IGxhIGVmaWNpZW5jaWEgZGUgbGEgdHJhbnNtaXNpw7NuIGRlIGRhdG9zIGVuIGxvcyBzaXN0ZW1hcyBkZSBjYWJsZWFkbyBlc3RydWN0dXJhZG8uIFVuYSBjb3JyZWN0YSBldmFsdWFjacOzbiB5IG1hbmVqbyBkZSBlc3RvcyBmZW7Ds21lbm9zIGdhcmFudGl6YSBxdWUgZWwgY2FibGVhZG8gc2VhIGNhcGF6IGRlIHNvcG9ydGFyIGxhcyBkZW1hbmRhcyBkZSBsYXMgcmVkZXMgbW9kZXJuYXMgc2luIGludGVycnVwY2lvbmVzIG8gZGVncmFkYWNpw7NuIHNpZ25pZmljYXRpdmEgZGVsIHJlbmRpbWllbnRvLgoKICAgICAgICAuYmdpLnAtNC5icmFkCiAgICAgICAgICBwLm1iLTAgTGEgYXRlbnVhY2nDs24gc2UgZGVmaW5lIGNvbW8gbGEgcmVkdWNjacOzbiBkZSBsYSBpbnRlbnNpZGFkIGRlIGxhIHNlw7FhbCBhIG1lZGlkYSBxdWUgZXN0YSBzZSBwcm9wYWdhIGEgdHJhdsOpcyBkZWwgY2FibGUuIEVzIHVuIGZlbsOzbWVubyBpbmV2aXRhYmxlIGRlYmlkbyBhIGxhIHJlc2lzdGVuY2lhIGVsw6ljdHJpY2EgaW5oZXJlbnRlIGRlbCBtYXRlcmlhbCBkZWwgY2FibGUgeSBhIGxhcyBpbnRlcmZlcmVuY2lhcyBxdWUgbGEgc2XDsWFsIGVuY3VlbnRyYSBlbiBzdSBjYW1pbm8uIExhIGF0ZW51YWNpw7NuIHNlIG1pZGUgZW4gZGVjaWJlbGlvcyAoZEIpIHkgZXMgdW4gcGFyw6FtZXRybyBjcsOtdGljbyBxdWUgZGViZSBzZXIgbWluaW1pemFkbyBwYXJhIGFzZWd1cmFyIGxhIGVmaWNhY2lhIGRlIGxhIHJlZC4KCiAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMuajEuZC1ub25lLmQtbGctYmxvY2sgCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMjQucG5nJyBhbHQ9JycpIAoKICAgIC5yb3cuYmc4LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAucHgtbGctNS5weC00CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtc3RhcnQKICAgICAgICAgIC5jb2wtYXV0by5tYi1sZy00Lm1iLTAKICAgICAgICAgICAgLmxpc3QKICAgICAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICAgICAgaDMubWItMSBGYWN0b3JlcyBxdWUgaW5mbHV5ZW4gZW4gbGEgYXRlbnVhY2nDs24KCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgICAgIC5jb2wtbGctMy5kLW5vbmUuZC1sZy1ibG9jay5qMSAKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMjUucG5nJywgYWx0PScnKQogICAgICAgICAgLmNvbC1sZy05CiAgICAgICAgICAgIC5iZzkuYnJhZC5wLTQuaC0xMDAuajEKICAgICAgICAgICAgICBTbHlkZXJBKHRpcG89ImIiKQogICAgICAgICAgICAgICAgLmJndy5zaGEuYnJhZDEucC00LmgtMTAwCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzI2LnBuZycgYWx0PScnKSAgCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgICAgICAgICAgICAgICAgaDUgTG9uZ2l0dWQgZGVsIGNhYmxlIAogICAgICAgICAgICAgICAgICAgICAgcC5tYi0wIEEgbWVkaWRhIHF1ZSBsYSBkaXN0YW5jaWEgZW50cmUgZWwgcHVudG8gZGUgdHJhbnNtaXNpw7NuIHkgZWwgZGUgcmVjZXBjacOzbiBhdW1lbnRhLCB0YW1iacOpbiBsbyBoYWNlIGxhIGF0ZW51YWNpw7NuLiBQb3IgbG8gdGFudG8sIHNlIGRlYmVuIHNlZ3VpciBsYXMgcmVjb21lbmRhY2lvbmVzIGRlIGxvbmdpdHVkIG3DoXhpbWEgZXN0YWJsZWNpZGFzIHBvciBsb3MgZXN0w6FuZGFyZXMuCgogICAgICAgICAgICAgICAgLmJndy5zaGEuYnJhZDEucC00LmgtMTAwCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzI2LnBuZycgYWx0PScnKSAgCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgICAgICAgICAgICAgICAgaDUgQ2FsaWRhZCBkZWwgbWF0ZXJpYWwgZGVsIGNhYmxlCiAgICAgICAgICAgICAgICAgICAgICBwLm1iLTAgQ2FibGVzIGZhYnJpY2Fkb3MgY29uIG1hdGVyaWFsZXMgZGUgYmFqYSBjYWxpZGFkLCBjb21vIGFsZWFjaW9uZXMgZW4gbHVnYXIgZGUgY29icmUgcHVybywgcHJlc2VudGFuIHVuYSBtYXlvciBhdGVudWFjacOzbi4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC5iZ3cuc2hhLmJyYWQxLnAtNC5oLTEwMAogICAgICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yNi5wbmcnIGFsdD0nJykgIAogICAgICAgICAgICAgICAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICAgICAgICAgICAgICAgIGg1IEZyZWN1ZW5jaWEgZGUgbGEgc2XDsWFsIAogICAgICAgICAgICAgICAgICAgICAgcC5tYi0wIExhcyBzZcOxYWxlcyBkZSBhbHRhIGZyZWN1ZW5jaWEgZXhwZXJpbWVudGFuIHVuYSBhdGVudWFjacOzbiBtYXlvciBxdWUgbGFzIGRlIGJhamEgZnJlY3VlbmNpYS4gRXN0byBlcyBwYXJ0aWN1bGFybWVudGUgcmVsZXZhbnRlIGVuIHJlZGVzIHF1ZSBkZWJlbiBtYW5lamFyIGdyYW5kZXMgdm9sw7ptZW5lcyBkZSBkYXRvcyBhIGFsdGEgdmVsb2NpZGFkLCBjb21vIGxhcyBjb25leGlvbmVzIGdpZ2FiaXQgeSBzdXBlcmlvcmVzLgoKICAgICAgICAgICAgICAgIC5iZ3cuc2hhLmJyYWQxLnAtNC5oLTEwMAogICAgICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yNi5wbmcnIGFsdD0nJykgIAogICAgICAgICAgICAgICAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICAgICAgICAgICAgICAgIGg1IENvbmRpY2lvbmVzIGFtYmllbnRhbGVzOiAgCiAgICAgICAgICAgICAgICAgICAgICBwLm1iLTAgTGEgdGVtcGVyYXR1cmEgeSBsYSBodW1lZGFkIHB1ZWRlbiBhZmVjdGFyIGxhcyBwcm9waWVkYWRlcyBlbMOpY3RyaWNhcyBkZWwgY2FibGUsIGNhdXNhbmRvIHZhcmlhY2lvbmVzIGVuIGxhIGF0ZW51YWNpw7NuLiAgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtc3RhcnQubXktNAogICAgICAuY29sLWF1dG8KICAgICAgICAubGlzdAogICAgICAgICAgLmxpc3RfX2l0ZW0KICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy9pY29uLnN2ZycsIGFsdD0nJykKICAgICAgICAgIC5saXN0X190eHQuYmdpY29uLnRleHQtd2hpdGUucC0wLnB4LTQKICAgICAgICAgICAgaDMubWItMSBJbXBvcnRhbmNpYSBkZSBtZWRpciBsYSBhdGVudWFjacOzbiAKCiAgICBwLm1iLTQgTGEgbWVkaWNpw7NuIGRlIGxhIGF0ZW51YWNpw7NuIHNlIHJlYWxpemEgY29uIGVxdWlwb3MgZGUgY2VydGlmaWNhY2nDs24gYXZhbnphZG9zIHF1ZSBlbnbDrWFuIHVuYSBzZcOxYWwgZGVzZGUgdW4gZXh0cmVtbyBkZWwgY2FibGUgeSBtaWRlbiBsYSBpbnRlbnNpZGFkIGRlIGxhIHNlw7FhbCBlbiBlbCBvdHJvIGV4dHJlbW8uIExvcyByZXN1bHRhZG9zIHNlIGNvbXBhcmFuIGNvbiBsb3MgbMOtbWl0ZXMgZXN0YWJsZWNpZG9zIHBvciBsb3MgZXN0w6FuZGFyZXMgZGUgbGEgaW5kdXN0cmlhLCBjb21vIFRJQS9FSUEgZSBJU08vSUVDLgoKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTgubXktbGctMC5teS0zLmoxCiAgICAgICAgb2wubGlzdGEtb2wtLWN1YWRyby5mYS11bAogICAgICAgICAgbGkgCiAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICBzcGFuIDEKICAgICAgICAgICAgc3BhbiAjW2IgUmVsZXZhbmNpYSBlbiBsYSByZWQ6XSBVbmEgYXRlbnVhY2nDs24gZXhjZXNpdmEgcHVlZGUgbGxldmFyIGEgbGEgcMOpcmRpZGEgZGUgZGF0b3MsIHJldHJhbnNtaXNpb25lcyB5IHVuIHJlbmRpbWllbnRvIGRlZmljaWVudGUgZGUgbGEgcmVkLiBMYXMgYXBsaWNhY2lvbmVzIHNlbnNpYmxlcywgY29tbyBsYXMgdmlkZW9jb25mZXJlbmNpYXMgbyBsYXMgdHJhbnNtaXNpb25lcyBlbiB0aWVtcG8gcmVhbCwgc2UgdmVuIHBhcnRpY3VsYXJtZW50ZSBhZmVjdGFkYXMgcG9yIHByb2JsZW1hcyBkZSBhdGVudWFjacOzbi4KICAgICAgICAgIGhyCiAgICAgICAgICBsaSAKICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YQogICAgICAgICAgICAgIHNwYW4gMgogICAgICAgICAgICBzcGFuICNbYiBQcnVlYmFzIGRlIGNlcnRpZmljYWNpw7NuOl0gQW50ZXMgZGUgcXVlIHVuYSBpbnN0YWxhY2nDs24gc2UgY29uc2lkZXJlIGNlcnRpZmljYWRhLCBkZWJlIHN1cGVyYXIgbGFzIHBydWViYXMgZGUgYXRlbnVhY2nDs24uIEVzdGFzIHBydWViYXMgYXNlZ3VyYW4gcXVlIGxhIGluZnJhZXN0cnVjdHVyYSBkZSBjYWJsZWFkbyBwdWVkYSBtYW5lamFyIGxhcyBjYXJnYXMgZGUgZGF0b3MgcmVxdWVyaWRhcyBzaW4gcMOpcmRpZGEgc2lnbmlmaWNhdGl2YSBkZSBjYWxpZGFkLgogICAgICAgICAgaHIgICAgICAgICAgCgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zLmoxCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMjcucG5nJyBhbHQ9JycpIAoKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS00CiAgICAgIC5jb2wtYXV0bwogICAgICAgIC5saXN0CiAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJywgYWx0PScnKQogICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICBoMy5tYi0xIFDDqXJkaWRhIGRlIHJldG9ybm8KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgLmJnMTAucC00LmJyYWQuaC0xMDAKICAgICAgICAgIHAubWItMCBMYSBww6lyZGlkYSBkZSByZXRvcm5vIChSZXR1cm4gTG9zcykgZXMgb3RyYSBtZWRpZGEgYsOhc2ljYSBlbiBsYSBjZXJ0aWZpY2FjacOzbiBkZSBjYWJsZWFkbyBlc3RydWN0dXJhZG8uIFNlIHJlZmllcmUgYSBsYSBjYW50aWRhZCBkZSBzZcOxYWwgcXVlIHNlIHJlZmxlamEgZGUgdnVlbHRhIGhhY2lhIGVsIHRyYW5zbWlzb3IgZW4gbHVnYXIgZGUgY29udGludWFyIGhhY2lhIGVsIHJlY2VwdG9yLiBFc3RhcyByZWZsZXhpb25lcyBvY3VycmVuIGRlYmlkbyBhIGRpc2NvbnRpbnVpZGFkZXMgZW4gZWwgY2FibGVhZG8sIGNvbW8gdmFyaWFjaW9uZXMgZGUgaW1wZWRhbmNpYSwgY29uZXhpb25lcyBtYWwgaGVjaGFzIG8gZGVmZWN0b3MgZW4gbG9zIGNhYmxlcy4KCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yOC5wbmcnIGFsdD0nJykgCgoKICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgIGltZy5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMjkucG5nJyBhbHQ9JycpIAogICAgICAgIHAgI1tiIE1lZGljacOzbiBkZSBsYSBww6lyZGlkYSBkZSByZXRvcm5vOl0gTG9zIGNlcnRpZmljYWRvcmVzIGF2YW56YWRvcyBtaWRlbiBsYSBjYW50aWRhZCBkZSBzZcOxYWwgcmVmbGVqYWRhIHkgcHJvcG9yY2lvbmFuIHVuIHZhbG9yIGVuIGRlY2liZWxpb3MgKGRCKS4gVW4gdmFsb3IgYWx0byBkZSBww6lyZGlkYSBkZSByZXRvcm5vIGluZGljYSBxdWUgdW5hIG1lbm9yIGNhbnRpZGFkIGRlIHNlw7FhbCBzZSByZWZsZWphLCBsbyBjdWFsIGVzIGRlc2VhYmxlLCB5YSBxdWUgc2lnbmlmaWNhIHF1ZSBsYSB0cmFuc21pc2nDs24gZXMgbcOhcyBlZmljaWVudGUgeSBoYXkgbWVub3MgaW50ZXJmZXJlbmNpYSBjb24gbGEgc2XDsWFsIHF1ZSBzaWd1ZSBzdSBjdXJzby4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS01CiAgICAgIC5jb2wtYXV0bwogICAgICAgIC5saXN0CiAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJywgYWx0PScnKQogICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICBoMy5tYi0xIENhdXNhcyBjb211bmVzIGRlIGxhIHDDqXJkaWRhIGRlIHJldG9ybm8KCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy05Lm15LWxnLTAubXktMwogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIGJnNyIpCiAgICAgICAgICBkaXYodGl0dWxvPSJDb25lY3RvcmVzIHkgdGVybWluYWNpb25lcyBpbmNvcnJlY3RhcyIpCiAgICAgICAgICAgIHAgVW4gbWFsIGNyaW1wYWRvIG8gZWwgdXNvIGRlIGNvbmVjdG9yZXMgZGUgYmFqYSBjYWxpZGFkIHB1ZWRlbiBjYXVzYXIgZGlzY29udGludWlkYWRlcyBlbiBlbCBjYWJsZWFkbywgZ2VuZXJhbmRvIHJlZmxleGlvbmVzIGRlIGxhIHNlw7FhbC4gICAgICAgICAgICAgCiAgICAgICAgICBkaXYodGl0dWxvPSJWYXJpYWNpb25lcyBlbiBsYSBpbXBlZGFuY2lhIikKICAgICAgICAgICAgcCBDdWFscXVpZXIgY2FtYmlvIGVuIGxhcyBwcm9waWVkYWRlcyBkZWwgY2FibGUsIGNvbW8gdG9yY2VkdXJhcyBvIGVtcGFsbWVzIGluY29ycmVjdG9zLCBhZmVjdGEgbGEgaW1wZWRhbmNpYSB5IHByb3ZvY2EgbGEgcMOpcmRpZGEgZGUgcmV0b3Juby4gIAogICAgICAgICAgZGl2KHRpdHVsbz0iRGVzZ2FzdGUgeSBkZXRlcmlvcm8gZGVsIGNhYmxlIikKICAgICAgICAgICAgcCBDYWJsZXMgZGHDsWFkb3MgcG9yIGZhY3RvcmVzIGFtYmllbnRhbGVzIG8gcG9yIGVsIHVzbyBwcm9sb25nYWRvIHB1ZWRlbiB0ZW5lciBwdW50b3MgZGUgYWx0YSBww6lyZGlkYSBkZSByZXRvcm5vLCBhZmVjdGFuZG8gZWwgcmVuZGltaWVudG8gZ2xvYmFsIGRlIGxhIHJlZC4gICAgICAgICAgICAgIAogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzEucG5nJyBhbHQ9JycpICAKCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtc3RhcnQubXktNQogICAgICAuY29sLWF1dG8KICAgICAgICAubGlzdAogICAgICAgICAgLmxpc3RfX2l0ZW0KICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy9pY29uLnN2ZycsIGFsdD0nJykKICAgICAgICAgIC5saXN0X190eHQuYmdpY29uLnRleHQtd2hpdGUucC0wLnB4LTQKICAgICAgICAgICAgaDMubWItMSBJbXBvcnRhbmNpYSBkZSBsYSBhdGVudWFjacOzbiB5IGxhIHDDqXJkaWRhIGRlIHJldG9ybm8KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzAucG5nJyBhbHQ9JycpIAogICAgICAuY29sLWxnLTgubXktbGctMC5teS0zLmoxCiAgICAgICAgb2wubGlzdGEtb2wtLWN1YWRyby5mYS11bAogICAgICAgICAgbGkgCiAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICBzcGFuIDEKICAgICAgICAgICAgc3BhbiAjW2IgRWZpY2llbmNpYSBkZSBsYSByZWQ6XSBNYW50ZW5lciBsYSBhdGVudWFjacOzbiB5IGxhIHDDqXJkaWRhIGRlIHJldG9ybm8gZGVudHJvIGRlIGxvcyBsw61taXRlcyBhY2VwdGFibGVzIGVzIG5lY2VzYXJpbyBwYXJhIHVuYSB0cmFuc21pc2nDs24gZGUgZGF0b3MgZmlhYmxlLiBMYXMgcmVkZXMgcXVlIG5vIGN1bXBsZW4gY29uIGVzdG9zIHBhcsOhbWV0cm9zIHRpZW5kZW4gYSBleHBlcmltZW50YXIgcHJvYmxlbWFzIGNvbW8gY2HDrWRhcyBkZSB2ZWxvY2lkYWQsIGVycm9yZXMgZGUgdHJhbnNtaXNpw7NuIHkgcMOpcmRpZGEgZGUgcGFxdWV0ZXMuCiAgICAgICAgICBocgogICAgICAgICAgbGkgCiAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICBzcGFuIDIKICAgICAgICAgICAgc3BhbiAjW2IgSW1wYWN0byBlbiBhcGxpY2FjaW9uZXMgc2Vuc2libGVzOl0gQXBsaWNhY2lvbmVzIGNvbW8gVm9JUCwgc3RyZWFtaW5nIGRlIHZpZGVvIHkgc2lzdGVtYXMgZGUgZGF0b3MgZW4gdGllbXBvIHJlYWwgZGVwZW5kZW4gZGUgdW5hIHJlZCBxdWUgbWluaW1pY2UgbGEgcMOpcmRpZGEgZGUgc2XDsWFsLiBJbmNsdXNvIHBlcXVlw7FhcyBkZXN2aWFjaW9uZXMgZW4gZXN0b3MgcGFyw6FtZXRyb3MgcHVlZGVuIHRlbmVyIHVuIGltcGFjdG8gc2lnbmlmaWNhdGl2byBlbiBlbCByZW5kaW1pZW50by4KICAgICAgICAgIGhyICAgICAgICAgIAogICAgICAgICAgbGkgCiAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICBzcGFuIDMKICAgICAgICAgICAgc3BhbiAjW2IgQ3VtcGxpbWllbnRvIGRlIGVzdMOhbmRhcmVzOl0gTGFzIG5vcm1hdGl2YXMgaW50ZXJuYWNpb25hbGVzIGV4aWdlbiBxdWUgbGFzIGluc3RhbGFjaW9uZXMgZGUgY2FibGVhZG8gZXN0cnVjdHVyYWRvIHNlIGNlcnRpZmlxdWVuIHBhcmEgZ2FyYW50aXphciBxdWUgbGEgaW5mcmFlc3RydWN0dXJhIHNlYSBhZGVjdWFkYSBwYXJhIHNvcG9ydGFyIGxhcyBhcGxpY2FjaW9uZXMgcHJldmlzdGFzLgogICAgICAgICAgaHIgICAgICAgICAgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtc3RhcnQubXktNQogICAgICAuY29sLWF1dG8KICAgICAgICAubGlzdAogICAgICAgICAgLmxpc3RfX2l0ZW0KICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy9pY29uLnN2ZycsIGFsdD0nJykKICAgICAgICAgIC5saXN0X190eHQuYmdpY29uLnRleHQtd2hpdGUucC0wLnB4LTQKICAgICAgICAgICAgaDMubWItMSBFc3RyYXRlZ2lhcyBwYXJhIG1pbmltaXphciBsYSBhdGVudWFjacOzbiB5IGxhIHDDqXJkaWRhIGRlIHJldG9ybm8gCgogICAgVGFic0MuY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi01CiAgICAgIC5weS0zLnB5LW1kLTQuYmcxMSh0aXR1bG89IkVsZWNjacOzbiBkZSBtYXRlcmlhbGVzIGRlIGFsdGEgY2FsaWRhZCIpCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLnB5LTQKICAgICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzIucG5nJyBhbHQ9JycpICAKICAgICAgICAgIC5jb2wtbGctNy5teS1sZy0wLm15LTMKICAgICAgICAgICAgaDUgRWxlY2Npw7NuIGRlIG1hdGVyaWFsZXMgZGUgYWx0YSBjYWxpZGFkCiAgICAgICAgICAgIHAubWItMCBVc2FyIGNhYmxlcyBjb24gY29uZHVjdG9yZXMgZGUgY29icmUgcHVybyB5IGJsaW5kYWplIGFkZWN1YWRvIHJlZHVjZSBsYSBhdGVudWFjacOzbi4gQWRlbcOhcywgZWxlZ2lyIGNvbmVjdG9yZXMgZGUgYnVlbmEgY2FsaWRhZCBheXVkYSBhIG1hbnRlbmVyIGxhIGltcGVkYW5jaWEgdW5pZm9ybWUgYSBsbyBsYXJnbyBkZSB0b2RhIGxhIGluc3RhbGFjacOzbi4KCiAgICAgIC5weS0zLnB5LW1kLTQuYmcxMSh0aXR1bG89IlByw6FjdGljYXMgZGUgaW5zdGFsYWNpw7NuIGNvcnJlY3RhcyIpCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLnB5LTQKICAgICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzMucG5nJyBhbHQ9JycpICAKICAgICAgICAgIC5jb2wtbGctNy5teS1sZy0wLm15LTMKICAgICAgICAgICAgaDUgUHLDoWN0aWNhcyBkZSBpbnN0YWxhY2nDs24gY29ycmVjdGFzIAogICAgICAgICAgICBwLm1iLTAgRXZpdGFyIGRvYmxhciBvIHRvcmNlciBsb3MgY2FibGVzIGRlIG1hbmVyYSBleGNlc2l2YSB5IGFzZWd1cmFyc2UgZGUgcXVlIGxhcyBjb25leGlvbmVzIHNlIHJlYWxpY2VuIGRlIGFjdWVyZG8gY29uIGxhcyBlc3BlY2lmaWNhY2lvbmVzIHTDqWNuaWNhcy4gVXRpbGl6YXIgaGVycmFtaWVudGFzIGFkZWN1YWRhcyBwYXJhIGNyaW1wYXIgbG9zIGNvbmVjdG9yZXMgZ2FyYW50aXphIHRlcm1pbmFjaW9uZXMgdW5pZm9ybWVzLgoKICAgICAgLnB5LTMucHktbWQtNC5iZzExKHRpdHVsbz0iTWFudGVuaW1pZW50byB5IHJldmlzacOzbiBwZXJpw7NkaWNhIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIucHktNAogICAgICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zNC5wbmcnIGFsdD0nJykgIAogICAgICAgICAgLmNvbC1sZy03Lm15LWxnLTAubXktMwogICAgICAgICAgICBoNSBNYW50ZW5pbWllbnRvIHkgcmV2aXNpw7NuIHBlcmnDs2RpY2EKICAgICAgICAgICAgcC5tYi0wIFJlYWxpemFyIGluc3BlY2Npb25lcyByZWd1bGFyZXMgZGUgbGEgaW5mcmFlc3RydWN0dXJhIGRlIGNhYmxlYWRvIHBhcmEgZGV0ZWN0YXIgeSBjb3JyZWdpciBwcm9ibGVtYXMgYW50ZXMgZGUgcXVlIGFmZWN0ZW4gZWwgcmVuZGltaWVudG8gZGUgbGEgcmVkLiBSZWVtcGxhemFyIGNhYmxlcyBvIGNvbmVjdG9yZXMgZGV0ZXJpb3JhZG9zIGVzIHVuYSBwYXJ0ZSBwcmltb3JkaWFsIGRlbCBtYW50ZW5pbWllbnRvLiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgIFNlcGFyYWRvciAKICAgICN0XzJfMi50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDIuMiBEaWFmb27DrWEgeSByZXRhcmRvCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTkubXktbGctMC5teS0zCiAgICAgICAgcCBMYSBkaWFmb27DrWEgeSBlbCByZXRhcmRvIHNvbiBwYXLDoW1ldHJvcyBpbXBvcnRhbnRlcyBxdWUgaW5mbHV5ZW4gZW4gbGEgY2FwYWNpZGFkIGRlbCBjYWJsZWFkbyBwYXJhIHRyYW5zbWl0aXIgZGF0b3MgZGUgbWFuZXJhIGVmaWNpZW50ZS4gQW1ib3MgZGViZW4gc2VyIGN1aWRhZG9zYW1lbnRlIGV2YWx1YWRvcyBwYXJhIGFzZWd1cmFyIHF1ZSBubyBoYXlhIGludGVyZmVyZW5jaWFzIG5pIHJldHJhc29zIHF1ZSBjb21wcm9tZXRhbiBsYSBjYWxpZGFkIGRlIGxhIGNvbXVuaWNhY2nDs24uCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIuYmcxMi5wLTQuYnJhZC5tYi00CiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzYucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgICAgICBoNSBEaWFmb27DrWEKCiAgICAgICAgICAgIHAubWItMCBMYSBkaWFmb27DrWEgb2N1cnJlIGN1YW5kbyBsYSBzZcOxYWwgdHJhbnNtaXRpZGEgcG9yIHVuIHBhciBkZSBjYWJsZXMgaW5kdWNlIHVuYSBpbnRlcmZlcmVuY2lhIG5vIGRlc2VhZGEgZW4gb3RybyBwYXIgZGUgY2FibGVzIGNlcmNhbm8uIFNlIG1pZGUgZGUgZG9zIGZvcm1hczogTkVYVCAoTmVhci1FbmQgQ3Jvc3N0YWxrKSB5IEZFWFQgKEZhci1FbmQgQ3Jvc3N0YWxrKS4gICAgICAgCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy02Lm15LWxnLTAubXktMwogICAgICAgICAgICBpbWcuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM3LnBuZycgYWx0PScnKQogICAgICAgICAgICBwLm1iLTAgI1tiIDEuIE5FWFQgKCNbaSBOZWFyLUVuZCBDcm9zc3RhbGspOl1dIEVzdGUgdGlwbyBkZSBkaWFmb27DrWEgc2UgbWlkZSBjZXJjYSBkZWwgcHVudG8gZGUgdHJhbnNtaXNpw7NuIHkgZXZhbMO6YSBjdcOhbnRvIGRlIGxhIHNlw7FhbCBzZSBhY29wbGEgYSB1biBwYXIgYWR5YWNlbnRlIGVuIGVsIGV4dHJlbW8gZGUgdHJhbnNtaXNpw7NuLiBVbiB2YWxvciBiYWpvIGRlIE5FWFQgZXMgZGVzZWFibGUsIHlhIHF1ZSBpbmRpY2EgcG9jYSBpbnRlcmZlcmVuY2lhLiAKICAgICAgICAgIC5jb2wtbGctNi5teS1sZy0wLm15LTMKICAgICAgICAgICAgaW1nLmltZy10Lm1iLTQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zOC5wbmcnIGFsdD0nJykKICAgICAgICAgICAgcC5tYi0wICNbYiAyLiBGRVhUICgjW2kgRmFyLUVuZCBDcm9zc3RhbGspOl1dIFNlIG1pZGUgZW4gZWwgZXh0cmVtbyBvcHVlc3RvIGFsIGRlIGxhIHRyYW5zbWlzacOzbiB5IGV2YWzDumEgbGEgY2FudGlkYWQgZGUgc2XDsWFsIHF1ZSBzZSBhY29wbGEgYSBvdHJvIHBhciBlbiBlbCBleHRyZW1vIHJlY2VwdG9yLiBBbCBpZ3VhbCBxdWUgY29uIE5FWFQsIHVuIHZhbG9yIGJham8gZGUgRkVYVCBlcyBwcmVmZXJpYmxlIHBhcmEgbWluaW1pemFyIGxhcyBpbnRlcmZlcmVuY2lhcy4gCgogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzUucG5nJyBhbHQ9JycpICAgIAoKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS01CiAgICAgIC5jb2wtYXV0bwogICAgICAgIC5saXN0CiAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJywgYWx0PScnKQogICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICBoMy5tYi0xIEZhY3RvcmVzIHF1ZSBhZmVjdGFuIGxhIGRpYWZvbsOtYToKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzkucG5nJyBhbHQ9JycpICAgICAgCiAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICBBY29yZGlvbkEodGlwbz0iYSIgY2xhc2UtdGFyamV0YT0idGFyamV0YSBiZzciKQogICAgICAgICAgZGl2KHRpdHVsbz0iRGlzZcOxbyBkZWwgY2FibGUgIikKICAgICAgICAgICAgcCBDYWJsZXMgZGUgcGFyIHRyZW56YWRvIGVzdMOhbiBkaXNlw7FhZG9zIHBhcmEgbWluaW1pemFyIGxhIGRpYWZvbsOtYSBtZWRpYW50ZSBsYSB0b3JzacOzbiBkZSBsb3MgcGFyZXMsIGxvIHF1ZSByZWR1Y2UgbGEgaW50ZXJmZXJlbmNpYSBlbnRyZSBlbGxvcy4gICAgICAgICAgICAgCiAgICAgICAgICBkaXYodGl0dWxvPSJDYWxpZGFkIGRlIGxvcyBjb25lY3RvcmVzICIpCiAgICAgICAgICAgIHAgQ29uZWN0b3JlcyBtYWwgZmFicmljYWRvcyBvIGRhw7FhZG9zIHB1ZWRlbiBhdW1lbnRhciBsYSBkaWFmb27DrWEsIGVzcGVjaWFsbWVudGUgZW4gaW5zdGFsYWNpb25lcyBkb25kZSBsYSBjYWxpZGFkIGRlIGxhIHNlw7FhbCBlcyBjcsOtdGljYS4gCiAgICAgICAgICBkaXYodGl0dWxvPSJQcm94aW1pZGFkIGRlIGxvcyBjYWJsZXMgIikKICAgICAgICAgICAgcCBMYSBwcm94aW1pZGFkIGVudHJlIGNhYmxlcyBwdWVkZSBleGFjZXJiYXIgbGEgZGlhZm9uw61hLiBTZXBhcmFyIGFkZWN1YWRhbWVudGUgbG9zIGNhYmxlcyB5IG1hbnRlbmVyIGVsIHRyZW56YWRvIGNlcmNhIGRlIGxvcyBjb25lY3RvcmVzIGF5dWRhIGEgcmVkdWNpciBsYSBpbnRlcmZlcmVuY2lhLgogICAgICAgICAgZGl2KHRpdHVsbz0iUmV0YXJkbyB5IDxpPnNrZXc8L2k+IGRlIHJldGFyZG8gIikKICAgICAgICAgICAgcCBFbCByZXRhcmRvIHNlIHJlZmllcmUgYWwgdGllbXBvIHF1ZSB0YXJkYSB1bmEgc2XDsWFsIGVuIHZpYWphciBkZSB1biBleHRyZW1vIGFsIG90cm8gZGVsIGNhYmxlLiBFbCAjW2kgc2tld10gZGUgcmV0YXJkbyBlcyBsYSBkaWZlcmVuY2lhIGVuIGVsIHRpZW1wbyBkZSBsbGVnYWRhIGRlIGxhcyBzZcOxYWxlcyBlbiBkaWZlcmVudGVzIHBhcmVzIGRlIGNhYmxlcywgbG8gcXVlIHB1ZWRlIGFmZWN0YXIgbGEgc2luY3Jvbml6YWNpw7NuIGVuIGFwbGljYWNpb25lcyBkZSBhbHRhIHZlbG9jaWRhZC4gICAgICAgICAgICAgCiAgICAgICAgICBkaXYodGl0dWxvPSJSZXRhcmRvIGRlIHByb3BhZ2FjacOzbiAiKQogICAgICAgICAgICBwIEVzdGUgcGFyw6FtZXRybyBtaWRlIGxhIHZlbG9jaWRhZCBkZSBsYSBzZcOxYWwgZW4gZWwgY2FibGUuIEZhY3RvcmVzIGNvbW8gbGEgbG9uZ2l0dWQgeSBlbCB0aXBvIGRlIG1hdGVyaWFsIGRlbCBjYWJsZSBwdWVkZW4gaW5mbHVpciBlbiBlbCByZXRhcmRvIGRlIHByb3BhZ2FjacOzbi4gVW4gcmV0YXJkbyBleGNlc2l2byBwdWVkZSByZXN1bHRhciBlbiBwcm9ibGVtYXMgZGUgc2luY3Jvbml6YWNpw7NuLCBlc3BlY2lhbG1lbnRlIGVuIGFwbGljYWNpb25lcyBjb21vIGxhIHRyYW5zbWlzacOzbiBkZSB2aWRlbyBlbiB0aWVtcG8gcmVhbC4gCiAgICAgICAgICBkaXYodGl0dWxvPSI8aT5Ta2V3PC9pPiBkZSByZXRhcmRvICIpCiAgICAgICAgICAgIHAgTGEgZGlmZXJlbmNpYSBlbiBsb3MgdGllbXBvcyBkZSBsbGVnYWRhIGRlIGxhcyBzZcOxYWxlcyBlbiBkaXN0aW50b3MgcGFyZXMgZGUgY2FibGVzIGVzIGNyw610aWNhIGVuIHJlZGVzIGdpZ2FiaXQgeSBzdXBlcmlvcmVzLiBVbiAjW2kgc2tld10gZGUgcmV0YXJkbyBlbGV2YWRvIHB1ZWRlIHByb3ZvY2FyIGZhbGxvcyBkZSBzaW5jcm9uaXphY2nDs24sIGxvIHF1ZSBhZmVjdGFyw6EgbGEgZWZpY2FjaWEgZ2VuZXJhbCBkZSBsYSByZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS01CiAgICAgIC5jb2wtYXV0bwogICAgICAgIC5saXN0CiAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJywgYWx0PScnKQogICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICBoMy5tYi0xIFNvbHVjaW9uZXMgcGFyYSBtaXRpZ2FyIGVsIHJldGFyZG8geSBlbCBza2V3CiAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTgubXktbGctMC5teS0zLmoxCiAgICAgICAgb2wubGlzdGEtb2wtLWN1YWRyby5mYS11bAogICAgICAgICAgbGkgCiAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICBzcGFuIDEKICAgICAgICAgICAgc3BhbiAjW2IgVXRpbGl6YXIgY2FibGVzIGRlIGFsdGEgY2FsaWRhZDpdIExvcyBjYWJsZXMgZGlzZcOxYWRvcyBlc3BlY8OtZmljYW1lbnRlIHBhcmEgYXBsaWNhY2lvbmVzIGRlIGFsdGEgdmVsb2NpZGFkIHRpZW5kZW4gYSB0ZW5lciB1biBtZWpvciByZW5kaW1pZW50byBlbiB0w6lybWlub3MgZGUgcmV0YXJkbyB5IHNrZXcuCiAgICAgICAgICBocgogICAgICAgICAgbGkgCiAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICBzcGFuIDIKICAgICAgICAgICAgc3BhbiAjW2IgSW5zdGFsYWNpw7NuIGFkZWN1YWRhOl0gQXNlZ3VyYXJzZSBkZSBxdWUgbG9zIGNhYmxlcyBubyBlc3TDqW4gZG9ibGFkb3Mgbmkgc3VqZXRvcyBhIHRlbnNpb25lcyBpbm5lY2VzYXJpYXMgcHVlZGUgYXl1ZGFyIGEgbWFudGVuZXIgbGEgdW5pZm9ybWlkYWQgZGVsIHJldGFyZG8gZW4gdG9kb3MgbG9zIHBhcmVzLgogICAgICAgICAgaHIgICAgICAgICAgCgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zLmoxCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDAucG5nJyBhbHQ9JycpIAoKICAgIFNlcGFyYWRvciAKICAgICN0XzJfMy50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDIuMyBNYXBlbyBkZSBjYWJsZXMKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIuYmcxLnAtNC5icmFkLm1iLTUKICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDEucG5nJyBhbHQ9JycpCiAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgcC5tYi0wIEVsIG1hcGVvIGRlIGNhYmxlcyBlcyB1biBwcm9jZWRpbWllbnRvIHF1ZSB2ZXJpZmljYSBxdWUgY2FkYSBjb25kdWN0b3IgZGVsIGNhYmxlIGVzdMOpIGNvcnJlY3RhbWVudGUgY29uZWN0YWRvIGRlc2RlIHVuIGV4dHJlbW8gYWwgb3Ryby4gRXN0YSBwcnVlYmEgYXNlZ3VyYSBxdWUgbm8gaGF5YSBlcnJvcmVzIGVuIGxhIGluc3RhbGFjacOzbiwgY29tbyBjYWJsZXMgY3J1emFkb3MsIGNvcnRvY2lyY3VpdG9zIG8gcGFyZXMgZGVzY29uZWN0YWRvcy4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIudGV4dC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTYuY29sLW1kLTkuY29sLTExLm1iLTQubWIteGwtMAogICAgICAgIC5iZzEzLmJyYWQuaC0xMDAKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzQyLnBuZyIsIGFsdD0iYWx0IikKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgaDQubWItMyBJbXBvcnRhbmNpYSBkZWwgbWFwZW8gZGUgY2FibGVzCiAgICAgICAgICAgIHAubWItMCBVbiBtYXBlbyBpbmNvcnJlY3RvIHB1ZWRlIGNhdXNhciBwcm9ibGVtYXMgc2lnbmlmaWNhdGl2b3MgZW4gbGEgdHJhbnNtaXNpw7NuIGRlIGRhdG9zIHkgYWZlY3RhciBlbCByZW5kaW1pZW50byBnZW5lcmFsIGRlIGxhIHJlZC4gTGEgcHJ1ZWJhIGRlIG1hcGVvIGNvbmZpcm1hIHF1ZSBsb3MgY2FibGVzIHNpZ3VlbiBlbCBlc3F1ZW1hIGRlIGNvbmV4acOzbiBhZGVjdWFkbywgbG8gY3VhbCBlcyBmdW5kYW1lbnRhbCBwYXJhIGFwbGljYWNpb25lcyBxdWUgcmVxdWllcmVuIHVuYSBjb25leGnDs24gc2luIGludGVycnVwY2lvbmVzLgoKICAgICAgLmNvbC1sZy02LmNvbC1tZC05LmNvbC0xMS5tYi00Lm1iLXhsLTAKICAgICAgICAuYmcxMy5icmFkLmgtMTAwCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy80My5wbmciLCBhbHQ9ImFsdCIpCiAgICAgICAgICAucC00CiAgICAgICAgICAgIGg0Lm1iLTMgUHJvY2VzbyBkZSBtYXBlbwogICAgICAgICAgICBwLm1iLTAgRWwgbWFwZW8gc2UgcmVhbGl6YSB1dGlsaXphbmRvIGRpc3Bvc2l0aXZvcyBkZSBjZXJ0aWZpY2FjacOzbiBxdWUgaWRlbnRpZmljYW4gZWwgb3JkZW4geSBsYSBjb25leGnDs24gZGUgbG9zIGNvbmR1Y3RvcmVzIGVuIGVsIGNhYmxlLiBMb3MgcmVzdWx0YWRvcyBkZSBsYSBwcnVlYmEgaW5kaWNhbiBzaSBlbCBjYWJsZWFkbyBzZSBoYSByZWFsaXphZG8gY29ycmVjdGFtZW50ZSBvIHNpIGVzIG5lY2VzYXJpbyBjb3JyZWdpciBhbGd1bmEgY29uZXhpw7NuLiAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS01CiAgICAgIC5jb2wtYXV0bwogICAgICAgIC5saXN0CiAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJywgYWx0PScnKQogICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICBoMy5tYi0xIFRpcG9zIGRlIGVycm9yZXMgY29tdW5lcyAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTEwCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLW1kLTYuY29sLXhsLm1iLTQubWIteGwtMAogICAgICAgICAgICAudGFyamV0YS1udW1lcmFkYS5jb2xvci1zZWN1bmRhcmlvLnAtNS5oLTEwMAogICAgICAgICAgICAgIC50YXJqZXRhLW51bWVyYWRhX19udW1lcm8KICAgICAgICAgICAgICAgIC5oMiAxCiAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlcgogICAgICAgICAgICAgICAgYiBDYWJsZXMgY3J1emFkb3MuCiAgICAgICAgICAgICAgcC5tYi0wIE9jdXJyZSBjdWFuZG8gbG9zIGNvbmR1Y3RvcmVzIGVzdMOhbiBjb25lY3RhZG9zIGVuIHVuIG9yZGVuIGluY29ycmVjdG8sIGxvIHF1ZSBpbXBpZGUgbGEgY29tdW5pY2FjacOzbiBhZGVjdWFkYSBlbnRyZSBsb3MgZGlzcG9zaXRpdm9zLgoKICAgICAgICAgIC5jb2wtbWQtNi5jb2wteGwubWItNC5tYi14bC0wCiAgICAgICAgICAgIC50YXJqZXRhLW51bWVyYWRhLmNvbG9yLWFjZW50by1jb250ZW5pZG8ucC01LmgtMTAwCiAgICAgICAgICAgICAgLnRhcmpldGEtbnVtZXJhZGFfX251bWVybwogICAgICAgICAgICAgICAgLmgyIDIKICAgICAgICAgICAgICBwLnRleHQtY2VudGVyIAogICAgICAgICAgICAgICAgYiBDb3J0b2NpcmN1aXRvcy4KICAgICAgICAgICAgICBwLm1iLTAgU2UgcHJvZHVjZSBjdWFuZG8gZG9zIG8gbcOhcyBjb25kdWN0b3JlcyBlc3TDoW4gZW4gY29udGFjdG8sIGxvIHF1ZSBwdWVkZSBwcm92b2NhciBmYWxsb3MgZW4gbGEgdHJhbnNtaXNpw7NuIGRlIHNlw7FhbC4KCiAgICAgICAgICAuY29sLW1kLTYuY29sLXhsLm1iLTQubWIteGwtMAogICAgICAgICAgICAudGFyamV0YS1udW1lcmFkYS5jb2xvci1hY2VudG8tYm90b25lcy5wLTUuaC0xMDAKICAgICAgICAgICAgICAudGFyamV0YS1udW1lcmFkYV9fbnVtZXJvCiAgICAgICAgICAgICAgICAuaDIgMwogICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIKICAgICAgICAgICAgICAgIGIgQ29uZXhpb25lcyBhYmllcnRhcy4gCiAgICAgICAgICAgICAgcC5tYi0wIFN1Y2VkZSBjdWFuZG8gdW5vIG8gbcOhcyBjb25kdWN0b3JlcyBubyBlc3TDoW4gY29uZWN0YWRvcyBlbiB1bm8gZGUgbG9zIGV4dHJlbW9zLCBsbyBxdWUgaW50ZXJydW1wZSBsYSBjb211bmljYWNpw7NuLgoKICAgIC5yb3cuYmc4LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAucHgtbGctNS5weC00CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtc3RhcnQubXktNQogICAgICAgICAgLmNvbC1hdXRvCiAgICAgICAgICAgIC5saXN0CiAgICAgICAgICAgICAgLmxpc3RfX2l0ZW0KICAgICAgICAgICAgICAgIC5saXN0X19pdGVtX19pY29uCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJywgYWx0PScnKQogICAgICAgICAgICAgIC5saXN0X190eHQuYmdpY29uLnRleHQtd2hpdGUucC0wLnB4LTQKICAgICAgICAgICAgICAgIGgzLm1iLTEgU29sdWNpb25lcyBwYXJhIGVycm9yZXMgZGUgbWFwZW8gICAgICAgCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTMuZC1ub25lLmQtbGctYmxvY2suajEgCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ0LnBuZycsIGFsdD0nJykKICAgICAgICAgIC5jb2wtbGctOQogICAgICAgICAgICAuYmc5LmJyYWQucC00LmgtMTAwLmoxCiAgICAgICAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikKICAgICAgICAgICAgICAgIC5iZ3cuc2hhLmJyYWQxLnAtNC5oLTEwMAogICAgICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80NS5wbmcnIGFsdD0nJykgIAogICAgICAgICAgICAgICAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICAgICAgICAgICAgICAgIGg1IFJldmlzYXIgbGFzIGNvbmV4aW9uZXMKICAgICAgICAgICAgICAgICAgICAgIHAubWItMCBVdGlsaXphciBoZXJyYW1pZW50YXMgYWRlY3VhZGFzIHBhcmEgY3JpbXBhciB5IHZlcmlmaWNhciBsYXMgY29uZXhpb25lcyBkZSBsb3MgY2FibGVzIGFudGVzIGRlIGxhIGluc3RhbGFjacOzbiBmaW5hbC4KCiAgICAgICAgICAgICAgICAuYmd3LnNoYS5icmFkMS5wLTQuaC0xMDAKICAgICAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDUucG5nJyBhbHQ9JycpICAKICAgICAgICAgICAgICAgICAgICAuY29sLWxnLTgubXktbGctMC5teS0zCiAgICAgICAgICAgICAgICAgICAgICBoNSBTZWd1aXIgZXN0w6FuZGFyZXMgZGUgY2FibGVhZG8KICAgICAgICAgICAgICAgICAgICAgIHAubWItMCBBZGhlcmlyc2UgYSBsYXMgbm9ybWFzIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbywgY29tbyBUNTY4QSB5IFQ1NjhCLCBwYXJhIGdhcmFudGl6YXIgcXVlIGxvcyBjYWJsZXMgZXN0w6luIGNvcnJlY3RhbWVudGUgbWFwZWFkb3MuICAgICAgICAgICAgICAgICAgICAgICAgCg=="},null]}